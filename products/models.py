# LandHub/products/models.py (ƒë√£ c·∫≠p nh·∫≠t v·ªõi default)

from django.db import models
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.utils.text import slugify # Import slugify
# from django.contrib.auth.models import User
import uuid

# --- Model Category (gi·ªØ nguy√™n ho·∫∑c x√≥a/s·ª≠a t√πy √Ω) ---
class Category(models.Model):
    name = models.CharField(max_length=250)
    slug = models.SlugField(unique=True)

    class Meta:
        verbose_name_plural = "categories"

    def __str__(self):
        return self.name

# --- Model Product (ho·∫∑c Property) v·ªõi c√°c tr∆∞·ªùng ƒë√£ th√™m default ---
class Product(models.Model):

    # --- C√°c l·ªõp Choices (gi·ªØ nguy√™n) ---
    class PhapLyChoices(models.TextChoices):
        SO_DO_SO_HONG = 'SDSH', _('S·ªï ƒë·ªè/S·ªï h·ªìng')
        HOP_DONG_MUA_BAN = 'HDMB', _('H·ª£p ƒë·ªìng mua b√°n')
        VIET_TAY = 'VT', _('Gi·∫•y t·ªù vi·∫øt tay')
        KHAC = 'KHAC', _('Kh√°c')

    class HuongDatChoices(models.TextChoices):
        DONG = 'D', _('ƒê√¥ng')
        TAY = 'T', _('T√¢y')
        NAM = 'N', _('Nam')
        BAC = 'B', _('B·∫Øc')
        DONG_BAC = 'DB', _('ƒê√¥ng B·∫Øc')
        DONG_NAM = 'DN', _('ƒê√¥ng Nam')
        TAY_BAC = 'TB', _('T√¢y B·∫Øc')
        TAY_NAM = 'TN', _('T√¢y Nam')
        KHONG_XAC_DINH = 'KXD', _('Kh√¥ng x√°c ƒë·ªãnh')

    class LoaiDatChoices(models.TextChoices):
        DAT_O = 'DO', _('ƒê·∫•t ·ªü (Th·ªï c∆∞)')
        DAT_NONG_NGHIEP = 'DNN', _('ƒê·∫•t n√¥ng nghi·ªáp')
        DAT_DU_AN = 'DDA', _('ƒê·∫•t d·ª± √°n')
        DAT_THUONG_MAI = 'DTM', _('ƒê·∫•t th∆∞∆°ng m·∫°i d·ªãch v·ª•')
        KHAC = 'KHAC', _('Lo·∫°i kh√°c')

    class TrangThaiChoices(models.TextChoices):
        CON_BAN = 'CB', _('C√≤n b√°n')
        DA_BAN = 'DB', _('ƒê√£ b√°n')
        DA_COC = 'DC', _('ƒê√£ ƒë·∫∑t c·ªçc')

    class LoaiTaiKhoanChoices(models.TextChoices):
        CA_NHAN = 'CN', _('C√° nh√¢n')
        MOI_GIOI = 'MG', _('M√¥i gi·ªõi')
        CONG_TY = 'CTY', _('C√¥ng ty')

    # --- üß± Th√¥ng tin c∆° b·∫£n ---
    tieu_de = models.CharField(_('Ti√™u ƒë·ªÅ'), max_length=255, default='Ch∆∞a c√≥ ti√™u ƒë·ªÅ') # Th√™m default
    # slug: blank=True v√† c√≥ logic t·ª± t·∫°o trong save(), kh√¥ng c·∫ßn default c·ª©ng ·ªü ƒë√¢y.
    # Django s·∫Ω x·ª≠ l√Ω ƒë∆∞·ª£c khi migrate ho·∫∑c b·∫°n c√≥ th·ªÉ cho ph√©p null n·∫øu c·∫ßn.
    slug = models.SlugField(max_length=255, unique=True, blank=True, null=True, help_text=_('T·ª± ƒë·ªông t·∫°o n·∫øu ƒë·ªÉ tr·ªëng, d√πng cho URL')) # Th√™m null=True ƒë·ªÉ ch·∫Øc ch·∫Øn migrate ƒë∆∞·ª£c
    mo_ta = models.TextField(_('M√¥ t·∫£'), blank=True) # blank=True, kh√¥ng c·∫ßn default
    gia = models.DecimalField(_('Gi√°'), max_digits=19, decimal_places=0, default=0, help_text=_('ƒê∆°n v·ªã: VNƒê')) # Th√™m default
    dien_tich = models.DecimalField(_('Di·ªán t√≠ch (m¬≤)'), max_digits=10, decimal_places=2, default=0.0) # Th√™m default
    phap_ly = models.CharField(
        _('Ph√°p l√Ω'),
        max_length=10,
        choices=PhapLyChoices.choices,
        default=PhapLyChoices.SO_DO_SO_HONG # ƒê√£ c√≥ default
    )
    huong = models.CharField(
        _('H∆∞·ªõng'),
        max_length=10,
        choices=HuongDatChoices.choices,
        blank=True,
        null=True # ƒê√£ c√≥ null=True
    )
    mat_tien = models.DecimalField(_('M·∫∑t ti·ªÅn (m)'), max_digits=6, decimal_places=2, blank=True, null=True) # ƒê√£ c√≥ null=True
    chieu_dai = models.DecimalField(_('Chi·ªÅu d√†i (m)'), max_digits=6, decimal_places=2, blank=True, null=True) # ƒê√£ c√≥ null=True
    loai_dat = models.CharField(
        _('Lo·∫°i ƒë·∫•t'),
        max_length=10,
        choices=LoaiDatChoices.choices,
        default=LoaiDatChoices.DAT_O # ƒê√£ c√≥ default
    )

    # --- üìç Th√¥ng tin v·ªã tr√≠ ---
    dia_chi = models.CharField(_('ƒê·ªãa ch·ªâ'), max_length=255, default='Ch∆∞a cung c·∫•p') # ƒê√£ c√≥ default
    tinh_thanh = models.CharField(_('T·ªânh/Th√†nh ph·ªë'), max_length=100, default='Ch∆∞a r√µ') # Th√™m default
    quan_huyen = models.CharField(_('Qu·∫≠n/Huy·ªán'), max_length=100, default='Ch∆∞a r√µ') # Th√™m default
    phuong_xa = models.CharField(_('Ph∆∞·ªùng/X√£'), max_length=100, default='Ch∆∞a r√µ') # Th√™m default
    vi_do = models.FloatField(_('Vƒ© ƒë·ªô (Latitude)'), blank=True, null=True) # ƒê√£ c√≥ null=True
    kinh_do = models.FloatField(_('Kinh ƒë·ªô (Longitude)'), blank=True, null=True) # ƒê√£ c√≥ null=True

    # --- üñºÔ∏è H√¨nh ·∫£nh ---
    anh_dai_dien = models.ImageField(_('·∫¢nh ƒë·∫°i di·ªán'), upload_to='property_images/', blank=True, null=True) # ƒê√£ c√≥ null=True

    # --- üìÜ Th√¥ng tin th·ªùi gian & tr·∫°ng th√°i ---
    ngay_dang = models.DateTimeField(_('Ng√†y ƒëƒÉng'), auto_now_add=True) # auto_now_add x·ª≠ l√Ω vi·ªác n√†y
    ngay_cap_nhat = models.DateTimeField(_('Ng√†y c·∫≠p nh·∫≠t'), auto_now=True) # auto_now x·ª≠ l√Ω vi·ªác n√†y
    trang_thai = models.CharField(
        _('Tr·∫°ng th√°i'),
        max_length=10,
        choices=TrangThaiChoices.choices,
        default=TrangThaiChoices.CON_BAN # ƒê√£ c√≥ default
    )
    available = models.BooleanField(_('C√≤n hi·ªÉn th·ªã'), default=True) # ƒê√£ c√≥ default

    # --- üë§ Th√¥ng tin ng∆∞·ªùi b√°n ---
    ten_nguoi_ban = models.CharField(_('T√™n ng∆∞·ªùi b√°n'), max_length=150, default='Ch∆∞a r√µ') # Th√™m default
    so_dien_thoai = models.CharField(_('S·ªë ƒëi·ªán tho·∫°i'), max_length=20, default='') # Th√™m default (chu·ªói r·ªóng)
    email = models.EmailField(_('Email li√™n h·ªá'), blank=True, null=True) # ƒê√£ c√≥ null=True
    loai_tai_khoan = models.CharField(
        _('Lo·∫°i t√†i kho·∫£n'),
        max_length=10,
        choices=LoaiTaiKhoanChoices.choices,
        default=LoaiTaiKhoanChoices.CA_NHAN # ƒê√£ c√≥ default
    )

    # --- Meta class v√† methods (gi·ªØ nguy√™n) ---
    class Meta:
        ordering = ['-ngay_dang']
        verbose_name = _('B·∫•t ƒë·ªông s·∫£n')
        verbose_name_plural = _('B·∫•t ƒë·ªông s·∫£n')

    def __str__(self) -> str:
        return self.tieu_de

    def get_absolute_url(self):
        # --- S·ª≠a th√†nh ---
        return reverse('products:product_detail', kwargs={'id': self.id, 'slug': self.slug})
    
    def save(self, *args, **kwargs):
        if not self.slug and self.tieu_de: # Ch·ªâ t·∫°o slug n·∫øu ch∆∞a c√≥ v√† c√≥ ti√™u ƒë·ªÅ
            base_slug = slugify(self.tieu_de) or "bat-dong-san"
            unique_slug = base_slug
            num = 1
            # ƒê·∫£m b·∫£o slug l√† duy nh·∫•t - C·∫©n th·∫≠n khi c√≥ nhi·ªÅu b·∫£n ghi ƒë∆∞·ª£c t·∫°o ƒë·ªìng th·ªùi
            while Product.objects.filter(slug=unique_slug).exists():
                unique_slug = f'{base_slug}-{num}'
                num += 1
            self.slug = unique_slug
        super().save(*args, **kwargs)
        
class ProductImage(models.Model):
    product = models.ForeignKey(
        Product,
        related_name='images', # Gi√∫p truy c·∫≠p t·ª´ Product: product.images.all()
        on_delete=models.CASCADE,
        verbose_name=_('B·∫•t ƒë·ªông s·∫£n')
    )
    image = models.ImageField(
        _('H√¨nh ·∫£nh'),
        upload_to='property_images/details/' # L∆∞u ·∫£nh chi ti·∫øt v√†o th∆∞ m·ª•c con
    )
    alt_text = models.CharField(
        _('VƒÉn b·∫£n thay th·∫ø'),
        max_length=255,
        blank=True,
        null=True,
        help_text=_('M√¥ t·∫£ ng·∫Øn v·ªÅ h√¨nh ·∫£nh (t·ªët cho SEO v√† ng∆∞·ªùi d√πng khi·∫øm th·ªã)')
    )
    uploaded_at = models.DateTimeField(_('Ng√†y t·∫£i l√™n'), auto_now_add=True)

    class Meta:
        ordering = ['uploaded_at'] # S·∫Øp x·∫øp theo ng√†y t·∫£i l√™n
        verbose_name = _('·∫¢nh chi ti·∫øt BƒêS')
        verbose_name_plural = _('·∫¢nh chi ti·∫øt BƒêS')
        
    def __str__(self):
        return f"·∫¢nh cho {self.product.tieu_de} ({self.id})"